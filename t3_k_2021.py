'''
[анализ данных]

Бизнесмен решил построить ветряную электростанцию. Для этого ему необходим участок на равнине, который среди прочего благополучен сейсмически. Равнину подчинённые бизнесмена нашли, и стали проверять все факторы, в том числе и сейсмический. Для этого команда инженеров установила на участке несколько сейсмографов и в течение года собирала с них данные.

Ваша задача: написать программу, которая проанализирует данные и определит количество землетрясений за последний год. Помимо этого, необходимо группировать землетрясения по магнитуде. Решено выделить четыре диапазона магнитуд (границы включены в диапазон):

от 0 до 2
от 2.1 до 4.5
от 4.6 до 8
от 8.1
Учтите, что во время землетрясения от начала землетрясения до пика активности имеются колебания меньшей магнитуды. Классификация же землетрясения происходит по максимальному пику. Если в течение 70 минут после ненулевой активности сохраняется тишина, землетрясение считается законченным.

Датчики фиксируют данные каждые 10 минут. Так как сбор данных происходит в естественных условиях, необходимо учесть их ложные срабатывания, представляющие из себя одиночные пики произвольной величины. 

Входной формат: 52560 строк, состоящих из единственного вещественного числа, активность в очередной отсчёт времени. Пример формата:

0
0
0.4
0.9
1.6
0.8
0.5
0.1
0
0
Выходной формат: 4 строки данных, в каждой — количество землетрясений соответствующей группы. Например,

27
45
12
7
Итоговый балл за задачу определяется суммой баллов в каждом тесте. За правильный подсчёт общего числа землетрясений ставится 1/3 от полного балла за тест, остальные 2/3 баллов ставятся за верное распределение этого числа по группам.

Эта задача проверяет ваш навык написания алгоритмов анализа данных, что является частью финальной задачи.
'''
data = [float(input()) for _ in range(52560)]
zakon, maxi, maxi_local = 0, [], []
for i in range(len(data)):
    if data[i] > 0.0 and data[i + 1] > 0.0:
        zakon = 0
        maxi_local.append(data[i])
    elif data[i] == 0.0:
        if zakon < 7: zakon += 1
    elif data[i] > 0.0 and zakon == 0: maxi_local.append(float(data[i]))
    if zakon == 7 and len(maxi_local) > 0:
        maxi.append(max(maxi_local))
        maxi_local = []

first_gr, second_gr, three_gr, four_gr = 0, 0, 0, 0
for i in maxi:
    if 0.0 <= i <= 2: first_gr += 1
    elif 2.1 <= i <= 4.5: second_gr += 1
    elif 4.6 <= i <= 8: three_gr += 1
    elif i >= 8.1: four_gr += 1
print(first_gr, second_gr, three_gr, four_gr, sep='\n')